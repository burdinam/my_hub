import telebot
import config
from googletrans import Translator
import openai
from telebot import types
import random
from random import shuffle

# –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
bot = telebot.TeleBot(config.tg_token)
openai.api_key = config.openai_token

translator = Translator(service_urls=['translate.googleapis.com'])


# –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
def make_test(word):
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt="I'm composing a word test. I give you the word. You give me 3 options of wrong answers."
               " No repeating answers."
               "\nExample:\nI: Frog\nYou: \nElephant\nDog\nCat\nI:" + word + " \nYou:\n",
        temperature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=1
    )
    return response['choices'][0]['text']


# —Ñ—É–Ω–∫—Ü–∏—è random_word –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ñ–∞–π–ª–∞
def random_word(file):
    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    with open(file, "r") as file:
        lines = file.readlines()
        top10 = lines[-10:]
        word = random.choice(top10)[:-1] if len(top10) > 0 else 'Raccoon'
        return word


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=['start'])
def show_start(message):
    bot.send_photo(message.chat.id,
                   photo=open("orange1.png", 'rb'),
                   caption="")

    bot.send_message(message.chat.id,
                     text="<u>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ "
                          "–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –ª—É—á—à–µ –∏—Ö –∑–∞–ø–æ–º–Ω–∏—Ç—å.</u>\n\n"
                          "–ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ",
                     parse_mode="html")
    bot.send_message(message.chat.id,
                     text="üëá")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help
@bot.message_handler(commands=['help'])
def show_start(message):
    bot.send_photo(message.chat.id,
                   photo=open("red1.png", 'rb'),
                   caption="")
    bot.send_message(message.chat.id,
                     text="<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º</b>\n\n"
                          "üí° –ö–æ–≥–¥–∞ –≤—ã —á–∏—Ç–∞–µ—Ç–µ –∫–Ω–∏–≥—É –Ω–∞ "
                          "–∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç–µ <b>–Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ</b>, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –º–Ω–µ, "
                          "—è –µ–≥–æ –ø–µ—Ä–µ–≤–µ–¥—É –∏ –∑–∞–ø–∏—à—É –≤ —Å–ª–æ–≤–∞—Ä–∏–∫.\n\n"
                          "üí° –í—ã –º–æ–∂–µ—Ç–µ <b>–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞</b> —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "
                          "/vocabulary \n\n"
                          "üí° –° –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /compose –≤—ã –º–æ–∂–µ—Ç–µ"
                          " —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å <b>–ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b> –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ \n\n"
                          "üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å <b>–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç</b> –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è "
                          "–ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –î–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /test\n\n"
                          "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –º–µ–Ω—è —É–≤–∏–¥–µ—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /start\n\n",
                     parse_mode="html")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /compose
@bot.message_handler(commands=['compose'])
def show_start(message):
    with open("vocabulary.txt", "r") as file:
        words = file.readlines()
    n = len(words)
    word1 = words[n - 1]
    word2 = words[n - 2]
    word3 = words[n - 3]
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt="Compose a sentence using "
               "words" + word1 + ", " + word2 + ", " + word3 +
               "return each of these words in <b></b> tag",
        temperature=0.7,
        max_tokens=256,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=1
    )
    bot.send_message(message.chat.id,
                     text=response['choices'][0]['text'], parse_mode="html")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /test
@bot.message_handler(commands=['test'])
def show_test(message):
    # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é random_word
    word = random_word("vocabulary.txt")
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    test = make_test(word.title()).split("\n")
    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞—à–µ –∏—Å–∫–æ–º–æ–µ
    test.append(word.title())
    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    with open("current_answer.txt", "w") as file:
        file.write(translator.translate(word, src="en", dest="ru").text.title())
    # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
    shuffle(test)

    for i in range(0, 4):
        test[i] = translator.translate(test[i], src="en", dest="ru").text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)

    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞–∑–º–µ—Ç–∫—É
    btn1 = types.KeyboardButton(test[0].title())
    btn2 = types.KeyboardButton(test[1].title())
    btn3 = types.KeyboardButton(test[2].title())
    btn4 = types.KeyboardButton(test[3].title())
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id,
                     text="–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ <b>" + word.title() + "</b>?\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                     parse_mode="html", reply_markup=markup)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /vocabulary
@bot.message_handler(commands=['vocabulary'])
def show_vocabulary(message):
    with open("vocabulary.txt", "r") as file:
        lines = file.readlines()[-10:]
    for line in reversed(lines):
        bot.send_message(message.chat.id, text=line)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(content_types=['text'])
def handle_message(message):
    try:
        with open("current_answer.txt", "r") as file:
            word = file.readlines()
    except FileNotFoundError:
        c_file = open("current_answer.txt", "w")
        c_file.close()
        with open("current_answer.txt", "r") as file:
            word = file.readlines()

    hidemarkup = types.ReplyKeyboardRemove()

    if not word:
        if message.text.find(" ") > 0:
            bot.send_message(message.chat.id, text="–ü—Ä–æ—Å—Ç–∏—Ç–µ, –º—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞")
        else:
            bot.send_message(message.chat.id, text=translator.translate(message.text, src="en", dest="ru").text,
                             reply_markup=hidemarkup)
            with open("vocabulary.txt", "a") as v_file:
                v_file.write(message.text.title() + "\n")
    elif word[0] == message.text:
        bot.send_message(message.chat.id, text=random.choice("ü•≥üéâüëØüéäüëçü¶ùü§©ü•ÇüéÇüï∫"))
        bot.send_message(message.chat.id, text="–≠—Ç–æ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        bot.send_message(message.chat.id, text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å /test, –ª–∏–±–æ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ ",
                         reply_markup=hidemarkup)
    else:
        bot.send_message(message.chat.id, text="üòï")
        bot.send_message(message.chat.id, text="–£–≤—ã, —ç—Ç–æ –Ω–µ " + message.text + ", –∞ " + word[0])
        bot.send_message(message.chat.id, text="–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ—â–µ –æ–¥–∏–Ω /test –∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ",
                         reply_markup=hidemarkup)
    with open("current_answer.txt", "w") as file:
        file.write("")


bot.polling()
